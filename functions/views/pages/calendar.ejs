<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Voluntary Spam | Calendar</title>

    <%- include('../partials/head') -%>

    <link href="/bower_components/tui-calendar/dist/tui-calendar.min.css" rel="stylesheet" />
    <link href="/bower_components/tui-date-picker/dist/tui-date-picker.css" rel="stylesheet" />
    <link href="/bower_components/tui-time-picker/dist/tui-time-picker.css" rel="stylesheet" />

    <script src="/bower_components/moment/min/moment.min.js"></script>
    <script src="/bower_components/moment-timezone/moment-timezone.js"></script>

    <script src="/bower_components/tui-code-snippet/dist/tui-code-snippet.js"></script>
    <script src="/bower_components/tui-time-picker/dist/tui-time-picker.js"></script>
    <script src="/bower_components/tui-date-picker/dist/tui-date-picker.js"></script>
    <script src="/bower_components/tui-calendar/dist/tui-calendar.min.js"></script>
  </head>

  <body id="page-top">
    <!-- Navigation-->
    <%- include('../partials/nav') -%>

    <!-- Content-->
    <section class="content-section" id="content">
      <div class="container px-4 px-lg-5">
        <div class="row gx-4 gx-lg-5 justify-content-center">
          <div class="col-lg-8 text-center">
            <h2 class="text-white mb-4">Calendar</h2>
          </div>
        </div>

        <div class="text-white mb-4 text-left">
          <button id="prevBtn" class="btn btn-sm btn-outline-primary">Prev</button>
          <button id="todayBtn" class="btn btn-sm btn-outline-primary">Today</button>
          <button id="nextBtn" class="btn btn-sm btn-outline-primary">Next</button>
          <a class="btn btn-sm btn-primary mx-5" data-bs-toggle="modal" href="#event_notification_modal" role="button" id="btn_notify_all">Notify All</a>
          <label class="float-end"><input type="checkbox" id="useWorkweek" autocomplete="off" /> Hide Weekends</label>

          <span id="current_date" class="current_date"></span>
        </div>

        <div id="calendar" style="height: 800px"></div>
      </div>
    </section>



    <div class="modal fade" id="event_modal" aria-hidden="true" aria-labelledby="eventModalLabel" tabindex="-1">
      <div class="modal-dialog modal-lg modal-fullscreen-md-down modal-dialog-scrollable">
        <form name="event_form" id="event_form" onsubmit="return false;">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="eventModalLabel">Event</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <input type="hidden" name="eventId" id="event_id" value="" />

              <div class="form-check mb-3">
                <input type="checkbox" class="form-check-input event_is_allday" id="event_is_allday" name="is_allday" value="" placeholder="" autocomplete="off" />
                <label for="event_is_allday" class="form-check-label">Is all-day</label>
              </div>

              <div class="form-floating mb-3">
                <input type="text" class="form-control event_summary" id="event_summary" name="summary" value="" placeholder="" />
                <label for="event_summary">Title</label>
              </div>

              <div class="row">
                <div class="col">
                  <div class="form-floating mb-3">
                    <input type="date" class="form-control event_start_date" id="event_start_date" name="startDate" value="" placeholder=""/>
                    <label for="event_start_date">Event Start Date</label>
                  </div>

                </div>
                <div class="col">
                  <div class="form-floating mb-3">
                    <input type="time" class="form-control event_start_time" id="event_start_time" name="startTime" value="" placeholder=""/>
                    <label for="event_start_time">Event Start Time</label>
                  </div>
                </div>
              </div>

              
              <div class="row">
                <div class="col">
                  <div class="form-floating mb-3">
                    <input type="date" class="form-control event_end_date" id="event_end_date" name="endDate" value="" placeholder=""/>
                    <label for="event_end_date">Event End Date</label>
                  </div>

                </div>
                <div class="col">
                  <div class="form-floating mb-3">
                    <input type="time" class="form-control event_end_time" id="event_end_time" name="endTime" value="" placeholder=""/>
                    <label for="event_end_time">Event End Time</label>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button class="btn btn-outline-primary" data-bs-dismiss="modal">Cancel</button>
              <button class="btn btn-warning" id="btn_event_save">Save</button>
              <button class="btn btn-primary" data-bs-target="#event_notification_modal" data-bs-toggle="modal" data-bs-dismiss="modal">Notify...</button>
            </div>
          </div>
        </form>
      </div>
    </div>



    <div class="modal fade-not" id="event_notification_modal" aria-hidden="true" aria-labelledby="eventNotificationModalLabel" tabindex="-1">
      <div class="modal-dialog modal-sm modal-dialog-centered modal-dialog-scrollable" >
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="eventNotificationModalLabel">Notification</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">

          </div>
          <div class="modal-footer justify-content-between">
            <button class="btn btn-outline-primary" data-bs-target="#event_modal" data-bs-toggle="modal" data-bs-dismiss="modal">Cancel</button>
            <button class="btn btn-primary" data-bs-target="#event_modal" data-bs-toggle="modal" data-bs-dismiss="modal">Send</button>
          </div>
        </div>
      </div>
    </div>



    <!-- Footer-->
    <%- include('../partials/footer') -%>
  </body>

  <script>
    var vm = {notificationOnly: false};

    vm.broadcast = (eventName) => { dispatchEvent( new Event(eventName));}
    vm.listen = (eventName, func) => { addEventListener(eventName, () => func() ) };

    vm.loading = false;

    vm.prevBtn = document.getElementById("prevBtn");
    vm.todayBtn = document.getElementById("todayBtn");
    vm.nextBtn = document.getElementById("nextBtn");
    vm.useWorkweek = document.getElementById("useWorkweek");

    vm.modalOptions = {};
    vm.eventModal = new bootstrap.Modal(document.getElementById('event_modal'), vm.modalOptions);
    vm.eventModalEl = document.getElementById('event_modal');
    vm.eventIdEl = document.getElementById('event_id');
    vm.btnSaveEl = document.getElementById('btn_event_save');
    vm.btnNotifyAllEl = document.getElementById('btn_notify_all');

    vm.eventFormEl = document.querySelector('#event_form');

    vm.eventSummaryEl = vm.eventModalEl.querySelector('.modal-body .event_summary')
    vm.eventStartDateEl = vm.eventModalEl.querySelector('.modal-body .event_start_date')
    vm.eventStartTimeEl = vm.eventModalEl.querySelector('.modal-body .event_start_time')
    vm.eventEndDateEl = vm.eventModalEl.querySelector('.modal-body .event_end_date')
    vm.eventEndTimeEl = vm.eventModalEl.querySelector('.modal-body .event_end_time')
    vm.eventIsAllDayEl = vm.eventModalEl.querySelector('.modal-body .event_is_allday')


    vm.notifyModal = new bootstrap.Modal(document.getElementById('event_notification_modal'), vm.modalOptions);
    vm.notifyModalEl = document.getElementById('event_notification_modal');

    // var btnModalNotifySend = event

    vm.eventModalEl.addEventListener('show.bs.modal', function (event) {
      console.log('show.bs.modal');

      // ** get event
      if(vm.eventIdEl.value !== ''){
        fetch("/api/events/" + vm.eventIdEl.value , {
          headers: { "Content-Type": "application/json; charset=utf-8" },
        })
        .then((res) => {
          if(res.ok) {
            return res.json()
          }
          return res.text().then(text => {throw new Error(text)})
        })
        .then((response) => {
          console.log('event');
          console.dir(response);

          vm.isEventAllDay = !response.start.dateTime;

          vm.makeEventAllDay(vm.isEventAllDay);

          // ** update modal's contents
          vm.eventSummaryEl.value = response.summary;
          console.log(moment(response.start.date || response.start.dateTime).local().format("YYYY-MM-DD"));
          console.log(moment(response.start.date || response.start.dateTime).local().format("HH:mm:ss"));

          vm.eventStartDateEl.value = moment(response.start.date || response.start.dateTime).local().format("YYYY-MM-DD");
          vm.eventStartTimeEl.value = !vm.isEventAllDay ? moment(response.start.date || response.start.dateTime).local().format("HH:mm:ss") : '';
          vm.eventEndDateEl.value = moment(response.end.date || response.end.dateTime).local().format("YYYY-MM-DD");
          vm.eventEndTimeEl.value = !vm.isEventAllDay ? moment(response.end.date || response.end.dateTime).local().format("HH:mm:ss") : '';
        })
        .catch((err) => {
          console.dir(err);
          alert(err.message);
        });
      }
      else{
        // ** reset modal
        vm.resetModalValues();
      }
    });

    vm.eventModalEl.addEventListener('hidden.bs.modal', function (event) {
      vm.resetModalValues();
    });

    vm.btnNotifyAllEl.addEventListener('click', function(e){
      vm.notificationOnly = true;
    });

    vm.eventIsAllDayEl.addEventListener('change', function(e){
      console.log('all-day changed');
      var checked = e.target.checked;
      console.log(checked);

      if(checked){
        vm.makeEventAllDay(true);
      }
      else{
        vm.makeEventAllDay(false);
      }
    });

    vm.makeEventAllDay = function(isAllDay){
      if(isAllDay){
        vm.eventIsAllDayEl.checked = true;
        vm.eventStartTimeEl.setAttribute('disabled', 'disabled');
        vm.eventEndTimeEl.setAttribute('disabled', 'disabled');
      }
      else{
        vm.eventIsAllDayEl.checked = false;
        vm.eventStartTimeEl.removeAttribute('disabled');
        vm.eventEndTimeEl.removeAttribute('disabled');
      }
    }

    vm.resetModalValues = function(){
      vm.eventSummaryEl.value = '';
      vm.eventStartDateEl.value = '';
      vm.eventStartTimeEl.value = '';
      vm.eventEndDateEl.value = '';
      vm.eventEndTimeEl.value = '';
    }

    vm.updateEvent = function(){
      var data = new FormData(vm.eventFormEl);
      var req = new XMLHttpRequest();
      req.open("PUT", "/api/events/" + data.get('eventId') );
      req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
      req.send( JSON.stringify( Object.fromEntries(data)) );
    }

    vm.btnSaveEl.addEventListener('click', function(){
      console.log('saving event');
      vm.updateEvent();
    });

    vm.calendar = new tui.Calendar("#calendar", {
      defaultView: "month",
      month: {
        workweek: false,
      },
      useCreationPopup: false, // ** using our own modal popup
      useDetailPopup: false, // ** using our own modal popup
      usageStatistics: true,
      template: {
        monthDayname: function (dayname) {
          return (
            '<span class="calendar-week-dayname-name">' +
            dayname.label +
            "</span>"
          );
        },

        milestone: function (model) {
          return (
            '<span class="calendar-font-icon ic-milestone-b"></span> <span style="background-color: ' +
            model.bgColor +
            '">' +
            model.title +
            "</span>"
          );
        },
      },
      allday: function (schedule) {
        return getTimeTemplate(schedule, true);
      },
      time: function (schedule) {
        return getTimeTemplate(schedule, false);
      },

      // Options for daily, weekly view
      week: {},

    });

    vm.broadcast('dataLoading');
    fetch("/api/events", {
      headers: { "Content-Type": "application/json; charset=utf-8" },
    })
      .then((res) => {
        if(res.ok) {
          return res.json()
        }
        return res.text().then(text => {throw new Error(text)})
      })
      .then((response) => {
        console.dir(response);
        vm.calendar.clear();

        // https://nhn.github.io/tui.calendar/latest/Schedule
        let schedule = response;

        vm.calendar.createSchedules(schedule, true);
        vm.calendar.render();
      })
      .catch((err) => {
        console.log(err);
        alert("Filed to retrieve calendar events");
      })
      .finally(() => {
        vm.broadcast('dataLoaded');
      });

    vm.listen('dataLoaded', function(){ vm.loading = false;});
    vm.listen('dataLoading', function(){ vm.loading = true;});

    vm.calendar.on({
      clickMore: function (e) {
        console.log("clickMore", e);
      },
      clickSchedule: function (e) {
        console.log("clickSchedule", e);

        vm.eventIdEl.value = e.schedule.id;

        vm.eventModal.show();
      },
      clickDayname: function (date) {
        console.log("clickDayname", date);
      },
      beforeCreateSchedule: function (e) {
        console.log("beforeCreateSchedule", e);
        vm.eventIdEl.value = '';
        vm.eventModal.show();

        e.guide.clearGuideElement();
      },
      beforeUpdateSchedule: function (e) {
        const { schedule, changes } = e;
        console.log("beforeUpdateSchedule", e);
        vm.calendar.updateSchedule(schedule.id, schedule.calendarId, changes);
      },
      beforeDeleteSchedule: function (e) {
        console.log("beforeDeleteSchedule", e);
        vm.calendar.deleteSchedule(e.schedule.id, e.schedule.calendarId);
      },
      afterRenderSchedule: function (e) {
        console.log('afterRenderSchedule');
        const schedule = e.schedule;
        // var element = calendar.getElement(schedule.id, schedule.calendarId);
        // console.log('afterRenderSchedule', element);
      },
      clickTimezonesCollapseBtn: function (timezonesCollapsed) {
        console.log("timezonesCollapsed", timezonesCollapsed);

        if (timezonesCollapsed) {
          vm.calendar.setTheme({
            "week.daygridLeft.width": "77px",
            "week.timegridLeft.width": "77px",
          });
        } else {
          vm.calendar.setTheme({
            "week.daygridLeft.width": "60px",
            "week.timegridLeft.width": "60px",
          });
        }

        return true;
      },
    });

    vm.prevBtn.addEventListener("click", (e) => {
      vm.calendar.prev();
    });

    vm.todayBtn.addEventListener("click", (e) => {
      vm.calendar.today();
    });

    vm.nextBtn.addEventListener("click", (e) => {
      vm.calendar.next();
    });

    vm.useWorkweek.addEventListener("change", (e) => {
      vm.calendar.setOptions({
        month: {
          workweek: e.currentTarget.checked,
        },
      });
    });

  </script>
</html>
